// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: miniblog.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiniBlogClient is the client API for MiniBlog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiniBlogClient interface {
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	ListUserServerStream(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (MiniBlog_ListUserServerStreamClient, error)
	ListUserClientStream(ctx context.Context, opts ...grpc.CallOption) (MiniBlog_ListUserClientStreamClient, error)
	ListUserBidirectional(ctx context.Context, opts ...grpc.CallOption) (MiniBlog_ListUserBidirectionalClient, error)
}

type miniBlogClient struct {
	cc grpc.ClientConnInterface
}

func NewMiniBlogClient(cc grpc.ClientConnInterface) MiniBlogClient {
	return &miniBlogClient{cc}
}

func (c *miniBlogClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/v1.MiniBlog/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miniBlogClient) ListUserServerStream(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (MiniBlog_ListUserServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MiniBlog_ServiceDesc.Streams[0], "/v1.MiniBlog/ListUserServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &miniBlogListUserServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MiniBlog_ListUserServerStreamClient interface {
	Recv() (*ListUserResponse, error)
	grpc.ClientStream
}

type miniBlogListUserServerStreamClient struct {
	grpc.ClientStream
}

func (x *miniBlogListUserServerStreamClient) Recv() (*ListUserResponse, error) {
	m := new(ListUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miniBlogClient) ListUserClientStream(ctx context.Context, opts ...grpc.CallOption) (MiniBlog_ListUserClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MiniBlog_ServiceDesc.Streams[1], "/v1.MiniBlog/ListUserClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &miniBlogListUserClientStreamClient{stream}
	return x, nil
}

type MiniBlog_ListUserClientStreamClient interface {
	Send(*ListUserRequest) error
	CloseAndRecv() (*ListUserResponse, error)
	grpc.ClientStream
}

type miniBlogListUserClientStreamClient struct {
	grpc.ClientStream
}

func (x *miniBlogListUserClientStreamClient) Send(m *ListUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *miniBlogListUserClientStreamClient) CloseAndRecv() (*ListUserResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ListUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *miniBlogClient) ListUserBidirectional(ctx context.Context, opts ...grpc.CallOption) (MiniBlog_ListUserBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &MiniBlog_ServiceDesc.Streams[2], "/v1.MiniBlog/ListUserBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &miniBlogListUserBidirectionalClient{stream}
	return x, nil
}

type MiniBlog_ListUserBidirectionalClient interface {
	Send(*ListUserRequest) error
	Recv() (*ListUserResponse, error)
	grpc.ClientStream
}

type miniBlogListUserBidirectionalClient struct {
	grpc.ClientStream
}

func (x *miniBlogListUserBidirectionalClient) Send(m *ListUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *miniBlogListUserBidirectionalClient) Recv() (*ListUserResponse, error) {
	m := new(ListUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MiniBlogServer is the server API for MiniBlog service.
// All implementations must embed UnimplementedMiniBlogServer
// for forward compatibility
type MiniBlogServer interface {
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	ListUserServerStream(*ListUserRequest, MiniBlog_ListUserServerStreamServer) error
	ListUserClientStream(MiniBlog_ListUserClientStreamServer) error
	ListUserBidirectional(MiniBlog_ListUserBidirectionalServer) error
	mustEmbedUnimplementedMiniBlogServer()
}

// UnimplementedMiniBlogServer must be embedded to have forward compatible implementations.
type UnimplementedMiniBlogServer struct {
}

func (UnimplementedMiniBlogServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedMiniBlogServer) ListUserServerStream(*ListUserRequest, MiniBlog_ListUserServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUserServerStream not implemented")
}
func (UnimplementedMiniBlogServer) ListUserClientStream(MiniBlog_ListUserClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUserClientStream not implemented")
}
func (UnimplementedMiniBlogServer) ListUserBidirectional(MiniBlog_ListUserBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method ListUserBidirectional not implemented")
}
func (UnimplementedMiniBlogServer) mustEmbedUnimplementedMiniBlogServer() {}

// UnsafeMiniBlogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiniBlogServer will
// result in compilation errors.
type UnsafeMiniBlogServer interface {
	mustEmbedUnimplementedMiniBlogServer()
}

func RegisterMiniBlogServer(s grpc.ServiceRegistrar, srv MiniBlogServer) {
	s.RegisterService(&MiniBlog_ServiceDesc, srv)
}

func _MiniBlog_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiniBlogServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.MiniBlog/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiniBlogServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiniBlog_ListUserServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MiniBlogServer).ListUserServerStream(m, &miniBlogListUserServerStreamServer{stream})
}

type MiniBlog_ListUserServerStreamServer interface {
	Send(*ListUserResponse) error
	grpc.ServerStream
}

type miniBlogListUserServerStreamServer struct {
	grpc.ServerStream
}

func (x *miniBlogListUserServerStreamServer) Send(m *ListUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MiniBlog_ListUserClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiniBlogServer).ListUserClientStream(&miniBlogListUserClientStreamServer{stream})
}

type MiniBlog_ListUserClientStreamServer interface {
	SendAndClose(*ListUserResponse) error
	Recv() (*ListUserRequest, error)
	grpc.ServerStream
}

type miniBlogListUserClientStreamServer struct {
	grpc.ServerStream
}

func (x *miniBlogListUserClientStreamServer) SendAndClose(m *ListUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *miniBlogListUserClientStreamServer) Recv() (*ListUserRequest, error) {
	m := new(ListUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MiniBlog_ListUserBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MiniBlogServer).ListUserBidirectional(&miniBlogListUserBidirectionalServer{stream})
}

type MiniBlog_ListUserBidirectionalServer interface {
	Send(*ListUserResponse) error
	Recv() (*ListUserRequest, error)
	grpc.ServerStream
}

type miniBlogListUserBidirectionalServer struct {
	grpc.ServerStream
}

func (x *miniBlogListUserBidirectionalServer) Send(m *ListUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *miniBlogListUserBidirectionalServer) Recv() (*ListUserRequest, error) {
	m := new(ListUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MiniBlog_ServiceDesc is the grpc.ServiceDesc for MiniBlog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MiniBlog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.MiniBlog",
	HandlerType: (*MiniBlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListUser",
			Handler:    _MiniBlog_ListUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListUserServerStream",
			Handler:       _MiniBlog_ListUserServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListUserClientStream",
			Handler:       _MiniBlog_ListUserClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ListUserBidirectional",
			Handler:       _MiniBlog_ListUserBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "miniblog.proto",
}
